



My Notes:
---------

- design
  - must work on large size of devices
    - tv, watch, phone, tablet
    
- screen resoultion
  - ignore pixels, does not take into acccount screen size
    - android 1.6 (donut) introduced design on multiple device screen types
  - density independent pizel (dp or dip)
    - one pixel at 160 dpi baseline density
      - so get 2 pixels at 320 dpi (slaso known as 2x)
    - dpi: dots per inch
    
- design for small screen first
  - start with lowest common denominator
    - design for easy use with buttons on small screens
    - hard to view tablet UI on a phone
  - also helps simplify and prioritize what goes into the UI
  
- density buckets
  - sizes
    - ldpi,   120 dpi,    0.75x
    - mdpi,   160 dpi,    1x
    - hdpi,   240 dpi,    1.5x
    - xhdpi,  320 dpi,    2x
    - xxhdpi, 480 dpi,    3x
    - xxxhdpi, 640 dpi,   4x
  - usually only worry about the middle 4 (mdpi, hdpi, xhdpi, xxhdpi)
  - buckets help with scaling of graphic icons
  - for asset cripsness, usally ok to just provide for xhdpi and xxhdpim and let android scale them down
    - down sampling has risk -> performance, and not perfect
    - use Android Asset Studio for creating icons
      - it will create for the 4 buckets
      -

- vector vs bitmap
  - photoshop and gimp work mostly with rastr graphics
    - stores color in pixel information
    - can be scaled down with no problem, but get blurring on scale up
  - inkscape, illustrator and sketch use vector graphics
    - stores information about individual shape in image (center, radius if circle)
    
- resource qualifiers
  - ie:
    - res
      |- anim
      |- drawable           -> use for xml shapes
      |- drawable-hdpi      -> 240
      |- drawable-mdpi      -> 160
      |- drawable-nodpi     -> put things that shouldn't scale based on density (ie: background images)
      |- drawable-xhdpi     -> 320
      |- drawable-xxhdpi    -> 480
      |- layout
      |- values
      |- xml
      
  - segment by screen size
    - ie: res/layout-w600dp/myactivity.xml
  - segment by android build
    - ie: res/values-v21/styles.xml            (lollipop and above)
  - segment for specific languages
    - ie: res/drawable=mdpi-ja/localicon.jpg    (japanese)
    
- state lists drawables
  - states
    - default
    - pressed
    - checked
    - checked, pressed
  - use state lists
    - ie: res/drawable/checkbox.xml
    
    <selector>
      <item
        android:state_pressed="true"
        android:state_checked="true"
        android:drawable="@drawable/box_checked_pressed>
      <item
        android:state_pressed="true"
        android:drawable="@drawable/box_pressed>
      <item
        android:state_checked="true"
        android:drawable="@drawable/box_checked>
      <item 
        android:drawable="@drawable/box_default>
    </selector>
    
  - android traverses list and looks for first state that matches
    - so put more complicated states at top
  - other widget states
    - activated, focused, etc
  - can also create own states
  
    
- UI
  - nested tree that is called the view hierarchy
    - from view group to leaf views (textviews, buttons)
  - can create objects in code or xml file
    - xml file preferable to help seperate UI from biz lgic (presentation vs behavior)
  - all views have params
    - some are common params (width, height)
    - some soecific to a view (background of a button)
    
- layouts
  - box model
    - every element has content bounds, which  is ectangular (like html)
    - object bounds also contain padding
    - space between object bounds is called margins
  - padding vs margin
    - if want space to be part of the object, use padding
      - want to be part of the object when
        - want extra touch area
        - want larger backgound of object
  - note: usually don't apply borders; this is done using background images
  - types of layout
    - frameLayout arranges view one on top of the other
      - good for overlapping cntent
    - linearLayout arranges children in single direction
    - relativeLayout arranges chold views relative to eah other
      - or its own bounds
      - has performance implications, especially as root layout
    - gridLayout
      - each child has a row or column in that grid
      - child has weight property to fill column or row
      - great for aligning content along mutipe axis
    - scrollViw has one single child that you can scroll its contents
    - listView
      - also recyclerView
      - as well as viewpager
        - lets you horizontally page through individual items
        
- example layouts
  - gmail
    - Linearlayout          (orientation=vertical)
      |- Toolbar            (layuout_widtht=match, layout-height=56dp)
      |_ FrameLayout        (layout_weight=1, layout_heit=0)            -> so 'new' button overlaps list
        |- ListView         (layout_width=match, layout_height=match)
        |_ Button           (layout_gravity=bottom|right, margin=16dp)
        
  - adding new contact
    - LineartLayout         (orientation=vertical)
      |- Toolbar            (layout_widht=match, layout_heigh=56dp)
      |- ScrollView         (layout_weight=1, layout_heoght=0)
        |_ GridLayout       (layout_heigt=wrap, orientation=vertical)       -> height of scorll view child should based on its contents
        
  - app detail page in play store
    - FrameLayout
      |- ImageView          (scaleTyoe-centerCrop, layout_height=200dp)
      |- ScrollView         (layout_height=math, layout_width=match, paddingTop=200dp, clipToPadding=false)
        |_ Linearlayout     (orientation=vertical, background=white)
        |- ...
        |- HorizontalScrollView
          |- LinearLayout
      |- Toolbar            (layotu_width=match, layout_height=56dp)           -> will display over image at top
        
- layout tips
  - if use layout_height = 0 -> tells that we are nit using fixed height and will work out height later
  
    



Udacity Notes:
--------------